---
- name: Check if Application already installed
  stat:
    path: /Applications/{{ item.name }}.app
  register: app

- name: Should I skipp {{ item.name }}
  set_fact: 
    skip: "{{ app.stat.exists }}" 

- name: "Fetch {{ item.name }} last release"
  uri:
    url: "https://api.github.com/repos{{ item.url | urlsplit('path') }}/releases/latest"
    return_content: true
  register: json_response
  when: not skip

- name: Set filename
  set_fact:
    filename: darwin-x64
  when: not skip and ansible_facts['machine'] == 'x86_64'

- name: Set filename fallback
  set_fact:
    filename: darwin-arm64
  when: not skip and filename is not defined

- name: "Extract {{ filename }} asset from last release"
  set_fact:
    asset: "{{ json_response.json.assets | selectattr('name', 'match', '.*' + filename + '.*\\.dmg') | first | default('')}}"
  when: not skip and filename is defined

- name: "Extract any dmg"
  set_fact:
    asset: "{{ json_response.json.assets | selectattr('name', 'match', '.*\\.dmg') | first }}"
  when: not skip and asset == ''

- name: "Download DMG"
  get_url:
    url: "{{ asset.browser_download_url }}"
    dest: "/tmp/{{ asset.name }}"
    mode: "0755"
  when: not skip and asset is defined
  register: dmg_file

- name: "Mount DMG"
  command: "hdiutil attach {{ dmg_file.dest }} -mountpoint /Volumes/{{ item.name }}"
  when: not skip and dmg_file.dest is defined
  register: mount_dmg

- name: "Move App File in Applications folder"
  copy:
    src: "/Volumes/{{ item.name }}/{{ item.name }}.app"
    dest: /Applications
    force: yes
    remote_src: yes
  when: mount_dmg.changed 

- name: Detatch dmg
  command: "hdiutil detach /Volumes/{{ item.name }}"
  when: mount_dmg.changed

- name: "Delete DMG file"
  file:
    path: "{{ dmg_file.dest }}"
    state: absent
  when: not skip and dmg_file is defined
